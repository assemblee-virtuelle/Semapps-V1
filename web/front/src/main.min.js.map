{"version":3,"sources":["web/front/src/main.js"],"names":["window","log","m","console","readyCallbacks","SFClient","_classCallCheck","this","_createClass","key","value","fields","sorted","index","Object","keys","property","field","cardinality","push","GVCarto","_class","mainComponent","gvc","firstSearch","$window","$","buildingSelectedAll","buildingSelected","$loadingSpinner","sfClient","$gvMap","document","getElementById","$tabs","searchTypeCurrent","searchTypes","Personne","Organisation","location","hostname","body","classList","add","setSearchType","ajaxMultiple","buildings","start","sources","callback","ajaxCounter","allData","self","ajax","url","complete","e","JSON","parse","responseText","call","data","_this","domSearchTextInput","domId","domSearchResults","stateSet","timeout","callbackSearchEvent","searchEvent","bind","listen","blur","scrollToSearchResults","isReady","clearTimeout","setTimeout","i","stateName","stateCurrent","nameCapitalized","charAt","toUpperCase","slice","nameCurrentCapitalized","type","find","removeClass","addClass","renderSearchResult","show","hide","gvmap","mapShowBuildingPinAll","scrollTo","offset","top","duration","easing","preventDefault","term","search","building","char","replace","RegExp","_this2","lastSearchTerm","lastSearchBuilding","set","innerHTML","loadingPageContentStart","loadingPageContentStop","responseJSON","searchQueryLastComplete","encodeURIComponent","dataType","response","renderSearchResultResponse","error","results","length","mapShowBuildingPin","typesCounter","result","createElement","extend","appendChild","html","total","id","event","Array","isArray","addEventListener","selector","querySelectorAll","ready"],"mappings":"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","file":"main.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  // Devel\n  window.log = (m) => {\n    console.log(m);\n  };\n\n  var readyCallbacks = [];\n\n  // A custom client for Semantic Forms specific treatments.\n  class SFClient {\n    sortFormFields(fields) {\n      let sorted = {};\n      for (let index in Object.keys(fields)) {\n        let key = fields[index].property;\n        let field = fields[index];\n        if (field.cardinality === '0 Or More') {\n          sorted[key] = sorted[key] || [];\n          sorted[key].push(field);\n        }\n        else {\n          sorted[key] = field;\n        }\n      }\n      return sorted;\n    }\n\n    getFirstFieldValue(key, fields) {\n      return typeof fields[key] === 'array' ? fields[key] : fields[key][0];\n    }\n  }\n\n  window.GVCarto = class {\n\n    constructor(mainComponent) {\n      window.gvc = this;\n      this.mainComponent = mainComponent;\n      this.firstSearch = true;\n      this.$window = $(window);\n      this.buildingSelectedAll = 'partout';\n      this.buildingSelected = this.buildingSelectedAll;\n      this.$loadingSpinner = $('#gv-spinner');\n      this.sfClient = new SFClient();\n      this.$gvMap = $(document.getElementById('gv-map'));\n      this.$tabs = $('.nav-tabs');\n      this.searchTypeCurrent = 'all';\n      this.searchTypes = {\n        // TODO use URI for type keys (change should be made in sf lookup results).\n        Personne: 'Personne',\n        Organisation: 'Organisation'\n      };\n\n      // Special class for dev env.\n      if (window.location.hostname === '127.0.0.1') {\n        window.document.body.classList.add('dev-env');\n      }\n\n      this.setSearchType(this.searchTypeCurrent);\n\n      this.ajaxMultiple({\n        buildings: '/webservice/building'\n      }, this.start);\n    }\n\n    ajaxMultiple(sources, callback) {\n      \"use strict\";\n      var ajaxCounter = 0;\n      var allData = {};\n      var self = this;\n      for (var key in sources) {\n        ajaxCounter++;\n        $.ajax({\n          url: sources[key],\n          complete: function (key) {\n            return function (e) {\n              ajaxCounter--;\n              allData[key] = JSON.parse(e.responseText);\n              // Final callback.\n              if (ajaxCounter === 0) {\n                callback.call(self, allData);\n              }\n            }\n          }(key)\n        });\n      }\n    }\n\n    start(data) {\n      \"use strict\";\n      this.buildings = data.buildings;\n      // Save key for further usage.\n      for (let key in this.buildings) {\n        this.buildings[key].key = key;\n      }\n      // Shortcuts.\n      this.domSearchTextInput = this.domId('searchText');\n      this.domSearchResults = this.domId('searchResults');\n      this.stateSet('waiting');\n\n      // Listeners.\n      var timeout;\n      var callbackSearchEvent = this.searchEvent.bind(this);\n      // Click on submit button.\n      this.listen('searchForm', 'submit', (e) => {\n        this.domSearchTextInput.blur();\n        this.scrollToSearchResults();\n        callbackSearchEvent(e);\n      });\n      // Launch callbacks\n      this.isReady = true;\n      // Type in search field.\n      this.listen('searchText', 'keyup', () => {\n        if (timeout) {\n          window.clearTimeout(timeout);\n        }\n        // Avoid to make too much requests when typing.\n        timeout = window.setTimeout(callbackSearchEvent, 500);\n      });\n\n      // Ready callbacks.\n      for (let i in readyCallbacks) {\n        readyCallbacks[i]();\n      }\n    }\n\n    stateSet(stateName) {\n      if (this.stateCurrent !== stateName) {\n        let nameCapitalized = stateName.charAt(0).toUpperCase() + stateName.slice(1);\n        if (this.stateCurrent) {\n          let nameCurrentCapitalized = this.stateCurrent.charAt(0).toUpperCase() + this.stateCurrent.slice(1);\n          this['state' + nameCurrentCapitalized + 'Exit']();\n          this.stateCurrent = null;\n        }\n        // Callback should not return false if success.\n        if (this['state' + nameCapitalized + 'Init']() !== false) {\n          this.stateCurrent = stateName;\n        }\n      }\n    }\n\n    setSearchType(type) {\n      if (type !== this.searchTypeCurrent) {\n        this.$tabs\n          .find('li[rel=' + this.searchTypeCurrent + ']')\n          .removeClass('active');\n      }\n\n      this.searchTypeCurrent = type;\n\n      this.$tabs\n        .find('li[rel=' + type + ']')\n        .addClass('active');\n\n      // Reload render results.\n      gvc.renderSearchResult();\n    }\n\n    loadingPageContentStart() {\n      this.$loadingSpinner.show();\n    }\n\n    loadingPageContentStop() {\n      this.$loadingSpinner.hide();\n    }\n\n    /* -- Waiting --*/\n    stateWaitingInit() {\n      gvmap.mapShowBuildingPinAll();\n    }\n\n    stateWaitingExit() {\n\n    }\n\n    /* -- Search -- */\n\n    stateSearchInit() {\n      if (!this.domSearchTextInput.value) {\n        this.stateSet('waiting');\n        // Block saving current state.\n        return false;\n      }\n    }\n\n    stateSearchExit() {\n\n    }\n\n    scrollToSearchResults(complete) {\n      this.$window.scrollTo($('#searchTabs').offset().top - 150, {\n        duration: 1000,\n        easing: 'easeOutQuad',\n        complete: complete\n      });\n    }\n\n    searchEvent(e) {\n      // Event may be missing.\n      e && e.preventDefault();\n      var term = this.domSearchTextInput.value;\n      this.search(term, this.buildingSelected);\n    }\n\n    searchRouteChange(term, building) {\n      if (this.firstSearch) {\n        // Set value to input (used at first page load)\n        this.domSearchTextInput.value = term;\n        this.buildingSelected = gvc.buildingSelectedAll;\n        this.firstSearch = false;\n      }\n\n      // Launch search.\n      this.search(term, building);\n    }\n\n    textRemove(term, char) {\n      return term.replace(new RegExp(char, 'g'), '');\n    }\n\n    search(term, building) {\n      this.stateSet('search');\n\n      term = term.replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\n\n      // Prevent recursions due to route event changes,\n      // and also prevent to search two times the same values.\n      if (this.lastSearchTerm === term && this.lastSearchBuilding === building) {\n        return;\n      }\n\n      this.lastSearchTerm = term;\n      this.lastSearchBuilding = building;\n      this.mainComponent.set('route.path', '/rechercher/' + (building || 'partout') + '/' + term);\n\n      // Empty content.\n      this.domId('searchResults');\n      this.domSearchResults.innerHTML = '';\n      // Hide counters.\n      this.$tabs.find('li .counter').hide();\n\n      // Hide all results.\n      $('#gv-results-empty, #gv-results-error').hide();\n      this.loadingPageContentStart();\n\n      // Build callback function.\n      let complete = (data) => {\n        this.loadingPageContentStop();\n        this.renderSearchResult(data.responseJSON);\n      };\n\n      // Say that this function is the\n      // only one we expect to be executed.\n      // It prevent to parse multiple responses.\n      this.searchQueryLastComplete = complete;\n\n      this.loadingPageContentStart();\n\n      $.ajax({\n        url: '/webservice/search?b=' + encodeURIComponent(building) + '&t=' + encodeURIComponent(term),\n        dataType: 'json',\n        complete: (data) => {\n          \"use strict\";\n          // Check that we are on the last callback expected.\n          complete === this.searchQueryLastComplete\n            // Continue.\n          && complete(data);\n        }\n      });\n    }\n\n    renderSearchResult(response) {\n      \"use strict\";\n\n      // Allow empty response.\n      response = response || this.renderSearchResultResponse || {};\n      // Save last data for potential reload.\n      this.renderSearchResultResponse = response;\n\n      if (response.error) {\n        $('#gv-results-error').show();\n      }\n      else if (!response.results || !response.results.length) {\n        $('#gv-results-empty').show();\n      }\n      else {\n        // Empty if not already.\n        this.domSearchResults.innerHTML = '';\n        gvmap.mapShowBuildingPin(this.buildingSelected);\n        let typesCounter = {};\n        for (let i in response.results) {\n          let data = response.results[i];\n          // Count results event there are not displayed.\n          typesCounter[data.type] = typesCounter[data.type] || 0;\n          typesCounter[data.type]++;\n          // Data is allowed.\n          if (this.searchTypes[data.type] && (this.searchTypeCurrent === 'all' || data.type === this.searchTypeCurrent)) {\n            let result = document.createElement('gv-results-item');\n            // Apply all parameters (type / desc / etc... ).\n            $.extend(result, data);\n            this.domSearchResults.appendChild(result);\n          }\n        }\n\n        // Set counters.\n        this.$tabs.find('li .counter').html(0);\n        let keys = Object.keys(typesCounter);\n        let total = 0;\n        for (let i in keys) {\n          let type = keys[i]\n          let value = typesCounter[type] || 0;\n          this.$tabs.find('li[rel=\"' + type + '\"] .counter').html(value);\n          total += value;\n        }\n        this.$tabs.find('li[rel=\"all\"] .counter').html(total);\n        // Show counters.\n        this.$tabs.find('li .counter').show();\n      }\n    }\n\n    listen(id, event, callback) {\n      // Support list of events names.\n      if (Array.isArray(event)) {\n        for (let i in event) {\n          this.listen(id, event[i], callback);\n        }\n        return;\n      }\n      return this.domId(id).addEventListener(event, callback);\n    }\n\n    domId(id) {\n      return document.getElementById(id);\n    }\n\n    dom(selector) {\n      return document.querySelectorAll(selector);\n    }\n  };\n\n  window.GVCarto.ready = function (callback) {\n    if (!window.gvc || !window.gvc.isReady) {\n      readyCallbacks.push(callback);\n    }\n    else {\n      callback();\n    }\n  };\n}());\n"]}