{"version":3,"sources":["web/front/src/semapps-results/semapps-results.js"],"names":["Polymer","is","properties","tabFirst","type","Object","value","plural","icon","typeSelected","String","tabs","Array","tabsRegistry","results","searchLastTerm","route","observer","attached","_this","this","semapps","domSearchResults","domId","domLoadingSpinner","$searchThemeFilter","$","SemAppsCarto","ready","typeSel","each","entities","data","counter","push","selectType","tabRegister","component","tab","selection","searchRender","_routeChanged","_this2","prefix","window","split","path","search","term","building","_this3","filterUri","val","searchLastFilter","replace","searchError","noResult","style","display","complete","responseJSON","searchQueryLastComplete","ajax","encodeURIComponent","response","_this4","length","set","totalCounter","typesCounter","resultTemps","buildingsCounter","renderSearchResultResponse","error","map","pinHideAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","buildingSelected","buildingSelectedAll","buildings","pins","getAddressToCreatePoint","pinShow","err","return","resultsTitle","domInner","document","getElementById","innerHTML","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","inner","createElement","nameType","toLowerCase","parent","appendChild","schema","all","entity","setTimeout","$$","classList","remove","add"],"mappings":"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","file":"semapps-results.min.js","sourcesContent":["Polymer({\n    is: 'semapps-results',\n    properties: {\n        tabFirst: {\n            type: Object,\n            value: {\n                type: 'all',\n                plural: 'Tous',\n                icon: 'list'\n            }\n        },\n        typeSelected: {\n            type: String\n        },\n        tabs: {\n            type: Array,\n            value: []\n        },\n        tabsRegistry: {\n            type: Object,\n            value: {}\n        },\n        results: {\n            type: Array,\n            value: []\n        },\n        searchLastTerm: {\n            type: String,\n            value: null\n        },\n        route: {\n            type: Object,\n            observer: '_routeChanged'\n        }\n    },\n\n    attached() {\n        \"use strict\";\n        semapps.results = this;\n        this.domSearchResults = semapps.domId('searchResults');\n        this.domLoadingSpinner = semapps.domId('searchLoadingSpinner');\n        this.$searchThemeFilter = $('#searchThemeFilter');\n        // Wait global settings.\n        SemAppsCarto.ready(() => {\n            let tabs = [];\n            let typeSel = '';\n            $.each(semapps.entities, (type, data) => {\n                data.counter = 0;\n                typeSel = (typeSel == '') ? type : typeSel;\n                tabs.push(data);\n            });\n            this.tabs = tabs;\n            // Activate first tab by default.\n            this.selectType(typeSel);\n        });\n    },\n\n    tabRegister(type, component) {\n        \"use strict\";\n        this.tabsRegistry[type] = component;\n        // Refresh selected tab.\n        this.selectType(this.typeSelected);\n    },\n\n    selectType(tab)  {\n        \"use strict\";\n        this.selection(tab);\n        // Render results.\n        this.searchRender();\n    },\n\n    _routeChanged: function (data) {\n        // We are on the search mode.\n        if (data.prefix === '/rechercher') {\n            // semapps.map.zoomGlobal();\n            // Route change may be fired before init.\n            window.SemAppsCarto.ready(() => {\n                let split = data.path.split('/');\n                this.search(split[2],split[1]);\n            });\n        }\n    },\n\n    search(term, building) {\n        \"use strict\";\n        let filterUri = this.$searchThemeFilter.val();\n\n        // Term and has not changed.\n        if (semapps.searchLastTerm === term &&\n            // Filter has not changed.\n            semapps.searchLastFilter === filterUri) {\n            // (maybe building changed).\n            this.searchRender();\n            return;\n        }\n        // Cleanup term to avoid search errors.\n        semapps.searchLastTerm =\n            term = (term || '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\n        // Save filter.\n        semapps.searchLastFilter = filterUri;\n        this.searchError =\n            this.noResult = false;\n        // Empty page.\n        this.results = [];\n        // Show spinner.\n        this.domLoadingSpinner.style.display = 'block';\n        // Build callback function.\n        let complete = (data) => {\n            this.domLoadingSpinner.style.display = 'none';\n            this.searchRender(data.responseJSON);\n        };\n        // Say that this function is the\n        // only one we expect to be executed.\n        // It prevent to parse multiple responses.\n        this.searchQueryLastComplete = complete;\n        semapps.ajax('webservice/search?' +\n            'term=' + encodeURIComponent(term) +\n            '&type=' + encodeURIComponent(this.typeSelected) +\n            '&filter=' + encodeURIComponent(semapps.searchLastFilter), (data) => {\n            \"use strict\";\n            // Check that we are on the last callback expected.\n            complete === this.searchQueryLastComplete\n            // Continue.\n            && complete(data);\n        });\n    },\n\n    searchRender(response) {\n        \"use strict\";\n        let results = [];\n        // Reset again if just rendering fired.\n        this.searchError =\n            this.noResult = false;\n        this.results.length = 0;\n        this.set('results', []);\n        let totalCounter = 0;\n        let typesCounter = {};\n        let resultTemps = {};\n        let buildingsCounter = {};\n        // Allow empty response.\n        response = response || this.renderSearchResultResponse || {};\n        // Save last data for potential reload.\n        this.renderSearchResultResponse = response;\n        if (response.error) {\n            this.searchError = true;\n        }\n        else if (response.results) {\n            semapps.map.pinHideAll();\n\n            for (let result of response.results) {\n                // Data is allowed.\n                if(semapps.buildingSelected === semapps.buildingSelectedAll || result.building === semapps.buildingSelected ){\n                    // log(result.type);\n                    typesCounter[this.typeSelected] = typesCounter[this.typeSelected] || 0;\n                    typesCounter[this.typeSelected]++;\n                    totalCounter++;\n                    if (semapps.buildings[result.building]) {\n                        buildingsCounter[result.building] = buildingsCounter[result.building] || 0;\n                        buildingsCounter[result.building]++;\n                    }\n                    if (typeof resultTemps[this.typeSelected] === 'undefined')\n                        resultTemps[this.typeSelected] = [];\n                    resultTemps[this.typeSelected].push(result);\n                    // log(resultTemps);\n                    if(result[\"address\"]){\n                        if( semapps.map.pins[result[\"uri\"]] === undefined){\n                            semapps.getAddressToCreatePoint(result[\"address\"],result[\"title\"],result[\"type\"],result[\"uri\"]);\n                        }\n                        else{\n                            semapps.map.pinShow(result[\"uri\"]);\n                        }\n                    }\n                }\n            }\n            //log(resultTemps[this.typeSelected]);\n            results = (typeof resultTemps[this.typeSelected] !== 'undefined' )? resultTemps[this.typeSelected] : [];//resultTemps[this.typeSelected];\n\n            // Create title.\n            let resultsTitle = '';\n            // Results number.\n            resultsTitle += (results.length) ? results.length + ' résultats ' : 'Aucun résultat  ';\n            // Building.\n            // Display title.\n            this.resultsTitle = resultsTitle;\n            // Display no results section or not.\n            this.noResult = results.length === 0;\n            let domInner = document.getElementById('searchResults');\n            domInner.innerHTML = '';\n            // domInner.innerHTML = '';\n            for(let result of results){\n                let inner = document.createElement('semapps-results-'+semapps.entities[this.typeSelected].nameType.toLowerCase());\n                inner.data = result;\n                inner.parent = this;\n                domInner.appendChild(inner);\n            }\n            // Show pins with results only.\n            if(typeof semapps.schema !== 'undefined'){\n                semapps.schema.pinHideAll();\n                $.each(semapps.buildings, (building) => {\n                    if (buildingsCounter[building] || building === semapps.buildingSelected) {\n                        semapps.schema.pinShow(building, buildingsCounter[building] || 0);\n                    }\n                });\n            }\n\n        }\n\n        this.tabsRegistry.all && (this.tabsRegistry.all.counter = totalCounter);\n        for (let entity in semapps.entities){\n            this.tabsRegistry[entity] && (this.tabsRegistry[entity].counter = typesCounter[entity] );\n        }\n        setTimeout(() => {\n            this.set('results', results);\n        }, 100);\n    },\n\n    selection(val){\n        if (this.typeSelected && this.tabsRegistry[val]) {\n            this.tabsRegistry[this.typeSelected].$$('li').classList.remove('active');\n        }\n        // It may not be already created.\n        if (this.tabsRegistry[val]) {\n            this.tabsRegistry[val].$$('li').classList.add('active');\n        }\n        if (val !== this.typeSelected ){\n            // Save.\n            this.typeSelected = val;\n            this.search()\n        }\n\n    }\n});\n"]}