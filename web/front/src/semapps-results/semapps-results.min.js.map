{"version":3,"sources":["web/front/src/semapps-results/semapps-results.js"],"names":["Polymer","is","properties","tabFirst","type","Object","value","plural","icon","typeSelected","String","tabs","Array","tabsRegistry","results","searchLastTerm","route","observer","attached","_this","this","semapps","domSearchResults","domId","domLoadingSpinner","$searchThemeFilter","$","SemAppsCarto","ready","typeSel","each","entities","data","counter","push","selectType","tabRegister","component","tab","selection","searchRender","_routeChanged","_this2","prefix","window","split","path","search","term","building","_this3","filterUri","val","searchLastFilter","replace","searchError","noResult","style","display","complete","responseJSON","searchQueryLastComplete","ajax","encodeURIComponent","response","_this4","length","dataPins","set","totalCounter","typesCounter","buildingsCounter","resultTemps","renderSearchResultResponse","error","map","pinHideAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","inArray","allowedType","buildings","buildingSelected","buildingSelectedAll","address","pins","url","success","donnee","pinShow","features","geometry","coordinates","log","err","return","key","keys","resultsTitle","title","all","i","setTimeout","$$","classList","remove","add"],"mappings":"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","file":"semapps-results.min.js","sourcesContent":["Polymer({\r\n  is: 'semapps-results',\r\n  properties: {\r\n    tabFirst: {\r\n      type: Object,\r\n      value: {\r\n        type: 'all',\r\n        plural: 'Tous',\r\n        icon: 'list'\r\n      }\r\n    },\r\n    typeSelected: {\r\n      type: String\r\n    },\r\n    tabs: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    tabsRegistry: {\r\n      type: Object,\r\n      value: {}\r\n    },\r\n    results: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    searchLastTerm: {\r\n      type: String,\r\n      value: null\r\n    },\r\n    route: {\r\n      type: Object,\r\n      observer: '_routeChanged'\r\n    }\r\n  },\r\n\r\n  attached() {\r\n    \"use strict\";\r\n    semapps.results = this;\r\n    this.domSearchResults = semapps.domId('searchResults');\r\n    this.domLoadingSpinner = semapps.domId('searchLoadingSpinner');\r\n    this.$searchThemeFilter = $('#searchThemeFilter');\r\n    // Wait global settings.\r\n    SemAppsCarto.ready(() => {\r\n      let tabs = [];\r\n      let typeSel = '';\r\n      $.each(semapps.entities, (type, data) => {\r\n        data.counter = 0;\r\n        typeSel = (typeSel == '') ? type : typeSel;\r\n        tabs.push(data);\r\n      });\r\n      this.tabs = tabs;\r\n      // Activate first tab by default.\r\n      this.selectType(typeSel);\r\n    });\r\n  },\r\n\r\n  tabRegister(type, component) {\r\n    \"use strict\";\r\n    this.tabsRegistry[type] = component;\r\n    // Refresh selected tab.\r\n    this.selectType(this.typeSelected);\r\n  },\r\n\r\n  selectType(tab)  {\r\n    \"use strict\";\r\n      this.selection(tab);\r\n    // Render results.\r\n    this.searchRender();\r\n  },\r\n\r\n  _routeChanged: function (data) {\r\n    // We are on the search mode.\r\n    if (data.prefix === '/rechercher') {\r\n      // Route change may be fired before init.\r\n      window.SemAppsCarto.ready(() => {\r\n        let split = data.path.split('/');\r\n        this.search(split[2], split[1]);\r\n      });\r\n    }\r\n  },\r\n\r\n  search(term, building) {\r\n    \"use strict\";\r\n    let filterUri = this.$searchThemeFilter.val();\r\n\r\n    // Term and has not changed.\r\n    if (semapps.searchLastTerm === term &&\r\n        // Filter has not changed.\r\n      semapps.searchLastFilter === filterUri) {\r\n      // (maybe building changed).\r\n      this.searchRender();\r\n      return;\r\n    }\r\n    // Cleanup term to avoid search errors.\r\n    semapps.searchLastTerm =\r\n      term = (term || '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\r\n    // Save filter.\r\n    semapps.searchLastFilter = filterUri;\r\n    this.searchError =\r\n      this.noResult = false;\r\n    // Empty page.\r\n    this.results = [];\r\n    // Show spinner.\r\n    this.domLoadingSpinner.style.display = 'block';\r\n    // Build callback function.\r\n    let complete = (data) => {\r\n      this.domLoadingSpinner.style.display = 'none';\r\n      this.searchRender(data.responseJSON);\r\n    };\r\n    // Say that this function is the\r\n    // only one we expect to be executed.\r\n    // It prevent to parse multiple responses.\r\n    this.searchQueryLastComplete = complete;\r\n    semapps.ajax('webservice/search?' +\r\n      't=' + encodeURIComponent(term) +\r\n      '&f=' + encodeURIComponent(semapps.searchLastFilter), (data) => {\r\n      \"use strict\";\r\n      // Check that we are on the last callback expected.\r\n      complete === this.searchQueryLastComplete\r\n        // Continue.\r\n      && complete(data);\r\n    });\r\n  },\r\n\r\n  searchRender(response) {\r\n    \"use strict\";\r\n    let results = [];\r\n    // Reset again if just rendering fired.\r\n    this.searchError =\r\n      this.noResult = false;\r\n    this.results.length = 0;\r\n    let dataPins = [];\r\n    this.set('results', []);\r\n    let totalCounter = 0;\r\n    let typesCounter = {};\r\n    let buildingsCounter = {};\r\n    let resultTemps = {};\r\n    // Allow empty response.\r\n    response = response || this.renderSearchResultResponse || {};\r\n    // Save last data for potential reload.\r\n    this.renderSearchResultResponse = response;\r\n\r\n    if (response.error) {\r\n      this.searchError = true;\r\n    }\r\n    else if (response.results) {\r\n      semapps.map.pinHideAll();\r\n\r\n      for (let result of response.results) {\r\n        // Data is allowed.\r\n\r\n          if($.inArray(result.type,semapps.allowedType) !== -1){\r\n            // Count results by building.\r\n            if (semapps.buildings[result.building]) {\r\n              buildingsCounter[result.building] = buildingsCounter[result.building] || 0;\r\n              buildingsCounter[result.building]++;\r\n            }\r\n            // This building is enabled.\r\n            if (semapps.buildingSelected === semapps.buildingSelectedAll || result.building === semapps.buildingSelected) {\r\n              // Count results.\r\n              typesCounter[result.type] = typesCounter[result.type] || 0;\r\n              typesCounter[result.type]++;\r\n              totalCounter++;\r\n\r\n                if (typeof resultTemps[result.type] === 'undefined')\r\n                    resultTemps[result.type] = [];\r\n                resultTemps[result.type].push(result);\r\n\r\n            }\r\n            if(result[\"address\"]){\r\n              if(dataPins[result.address] === undefined && semapps.map.pins[result.address] === undefined){\r\n                $.ajax({\r\n                    url : 'http://api-adresse.data.gouv.fr/search/', // on appelle le script JSON\r\n                    data: 'q=' + result[\"address\"],\r\n                    success : function(donnee){\r\n                      semapps.map.pinShow(donnee.features[0].geometry.coordinates[1],donnee.features[0].geometry.coordinates[0], result[\"address\"],result[\"title\"]);\r\n                      log(semapps.map.pins[result.address]);\r\n                      },\r\n                });\r\n              }\r\n            }\r\n          }\r\n      }\r\n\r\n      if(typeof resultTemps[this.typeSelected] === 'undefined' ){\r\n          // Deselect tab if current.\r\n          let key = Object.keys(resultTemps)[0];\r\n          this.selection(key);\r\n          results =(typeof resultTemps[this.typeSelected] !== 'undefined' )? resultTemps[Object.keys(resultTemps)[0]] : [];\r\n      }\r\n      else{\r\n          results = resultTemps[this.typeSelected];\r\n      }\r\n      // Create title.\r\n      let resultsTitle = '';\r\n      // Results number.\r\n      resultsTitle += (results.length) ? results.length + ' résultats dans ' : 'Aucun résultat dans ';\r\n      // Building.\r\n      resultsTitle += (semapps.buildingSelected === semapps.buildingSelectedAll) ? 'tous les bâtiments' : 'le bâtiment ' + semapps.buildings[semapps.buildingSelected].title;\r\n      // Display title.\r\n      this.resultsTitle = resultsTitle;\r\n\r\n      // Display no results section or not.\r\n      this.noResult = results.length === 0;\r\n\r\n\r\n    }\r\n\r\n    this.tabsRegistry.all && (this.tabsRegistry.all.counter = totalCounter);\r\n      /*\r\n      semapps.allowedType.forEach(function(type) {\r\n          this.tabsRegistry[type] && (this.tabsRegistry[type].counter = typesCounter[type] || 0);\r\n      });*/\r\n      for (var i = 0; i <  semapps.allowedType.length; i++) {\r\n          this.tabsRegistry[semapps.allowedType[i]] && (this.tabsRegistry[semapps.allowedType[i]].counter = typesCounter[semapps.allowedType[i]] || 0);\r\n      }\r\n\r\n    setTimeout(() => {\r\n      this.set('results', results);\r\n    }, 100);\r\n  },\r\n\r\n    selection(val){\r\n        if (this.typeSelected && this.tabsRegistry[val]) {\r\n            this.tabsRegistry[this.typeSelected].$$('li').classList.remove('active');\r\n        }\r\n        // Save.\r\n        this.typeSelected = val;\r\n        log(this.typeSelected);\r\n        // It may not be already created.\r\n        if (this.tabsRegistry[val]) {\r\n            this.tabsRegistry[val].$$('li').classList.add('active');\r\n        }\r\n    }\r\n});\r\n"]}