{"version":3,"sources":["web/front/src/gv-results/gv-results.js"],"names":["Polymer","is","properties","tabFirst","type","Object","value","plural","icon","typeSelected","String","tabs","Array","tabsRegistry","results","searchPreviousTerm","searchPreviousBuilding","route","observer","attached","_this","this","gvc","domSearchResults","domId","domLoadingSpinner","GVCarto","ready","$","each","entities","data","counter","push","selectType","tabRegister","component","tab","$$","classList","remove","add","searchRender","_routeChanged","_this2","prefix","window","split","path","buildingSelected","buildings","buildingSelectedAll","search","term","_this3","replace","searchError","noResult","style","display","complete","responseJSON","searchQueryLastComplete","ajax","encodeURIComponent","response","_this4","length","set","totalCounter","typesCounter","buildingsCounter","renderSearchResultResponse","error","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","searchTypes","building","err","return","noResultContext","title","map","pinShow","pinHide","all","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","setTimeout"],"mappings":"YAAAA,UACEC,GAAI,aACJC,YACEC,UACEC,KAAMC,OACNC,OACEF,KAAM,MACNG,OAAQ,OACRC,KAAM,SAGVC,cACEL,KAAMM,QAERC,MACEP,KAAMQ,MACNN,UAEFO,cACET,KAAMC,OACNC,UAEFQ,SACEV,KAAMQ,MACNN,UAEFS,oBACEX,KAAMM,OACNJ,MAAO,MAETU,wBACEZ,KAAMM,OACNJ,MAAO,MAETW,OACEb,KAAMC,OACNa,SAAU,kBAIdC,SAxCM,WAwCK,GAAAC,GAAAC,IAETC,KAAIR,QAAUO,KACdA,KAAKE,iBAAmBD,IAAIE,MAAM,iBAClCH,KAAKI,kBAAoBH,IAAIE,MAAM,wBAEnCE,QAAQC,MAAM,WACZ,GAAIhB,IACFS,EAAKjB,SAEPyB,GAAEC,KAAKP,IAAIQ,SAAU,SAAC1B,EAAM2B,GAC1BA,EAAKC,QAAU,EACfrB,EAAKsB,KAAKF,KAEZX,EAAKT,KAAOA,EAEZS,EAAKc,WAAW,UAIpBC,YA5DM,SA4DM/B,EAAMgC,GAEhBf,KAAKR,aAAaT,GAAQgC,EAE1Bf,KAAKa,WAAWb,KAAKZ,eAGvByB,WAnEM,SAmEKG,GAGLhB,KAAKZ,cAAgBY,KAAKR,aAAawB,IACzChB,KAAKR,aAAaQ,KAAKZ,cAAc6B,GAAG,MAAMC,UAAUC,OAAO,UAGjEnB,KAAKZ,aAAe4B,EAEhBhB,KAAKR,aAAawB,IACpBhB,KAAKR,aAAawB,GAAKC,GAAG,MAAMC,UAAUE,IAAI,UAGhDpB,KAAKqB,gBAGPC,cAAe,SAAUZ,GAAM,GAAAa,GAAAvB,IAET,iBAAhBU,EAAKc,QAEPC,OAAOpB,QAAQC,MAAM,WACnB,GAAIoB,GAAQhB,EAAKiB,KAAKD,MAAM,IAC5BzB,KAAI2B,iBACFL,EAAK5B,uBAA0BM,IAAI4B,UAAUH,EAAM,IAAMA,EAAM,GAAKzB,IAAI6B,oBAEtEP,EAAK7B,qBAAuBgC,EAAM,GACpCH,EAAKF,gBAGLE,EAAK7B,mBAAqBgC,EAAM,GAChCH,EAAKQ,OAAOL,EAAM,GAAIA,EAAM,QAMpCK,OAvGM,SAuGCC,GAAM,GAAAC,GAAAjC,IAGXgC,IAAQA,GAAQ,IAAIE,QAAQ,8CAA+C,IAC3ElC,KAAKmC,YACHnC,KAAKoC,UAAW,EAElBpC,KAAKP,WAELO,KAAKI,kBAAkBiC,MAAMC,QAAU,OAEvC,IAAIC,GAAW,SAAC7B,GACduB,EAAK7B,kBAAkBiC,MAAMC,QAAU,OACvCL,EAAKZ,aAAaX,EAAK8B,cAKzBxC,MAAKyC,wBAA0BF,EAC/BtC,IAAIyC,KAAK,uBAAyBC,mBAAmBX,GAAO,SAACtB,GAG3D6B,IAAaN,EAAKQ,yBAEfF,EAAS7B,MAIhBW,aAnIM,SAmIOuB,GAAU,GAAAC,GAAA7C,KAEjBP,IAEJO,MAAKmC,YACHnC,KAAKoC,UAAW,EAClBpC,KAAKP,QAAQqD,OAAS,EACtB9C,KAAK+C,IAAI,aACT,IAAIC,GAAe,EACfC,KACAC,IAOJ,IAJAN,EAAWA,GAAY5C,KAAKmD,+BAE5BnD,KAAKmD,2BAA6BP,EAE9BA,EAASQ,MACXpD,KAAKmC,aAAc,MAEhB,IAAIS,EAASnD,QAAS,CAAA,GAAA4D,IAAA,EAAAC,GAAA,EAAAC,EAAAC,MAAA,KAEzB,IAAA,GAAAC,GAAAC,EAAmBd,EAASnD,QAA5BkE,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,CAAA,GAA5BU,GAA4BN,EAAAxE,KAE/BgB,KAAI+D,YAAYD,EAAOhF,QAGrBkB,IAAI4B,UAAUkC,EAAOE,YACvBf,EAAiBa,EAAOE,UAAYf,EAAiBa,EAAOE,WAAa,EACzEf,EAAiBa,EAAOE,aAGtBhE,IAAI2B,mBAAqB3B,IAAI6B,qBAAuBiC,EAAOE,WAAahE,IAAI2B,mBAE9EqB,EAAac,EAAOhF,MAAQkE,EAAac,EAAOhF,OAAS,EACzDkE,EAAac,EAAOhF,QACpBiE,IAE0B,QAAtBhD,KAAKZ,cAA0B2E,EAAOhF,OAASiB,KAAKZ,cACtDK,EAAQmB,KAAKmD,MAnBI,MAAAG,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,QAAA,KAAAb,GAAAK,EAAAS,QAAAT,EAAAS,SAAA,QAAA,GAAAb,EAAA,KAAAC,IAyBzBvD,KAAKoE,gBAAkB,QACA,IAAnB3E,EAAQqD,SACV9C,KAAKoC,UAAW,EACZnC,IAAI2B,kBAAoB3B,IAAI6B,sBAC9B9B,KAAKoE,gBAAkB,qBAAuBnE,IAAI4B,UAAU5B,IAAI2B,kBAAkByC,MAAQ,MAK9F9D,EAAEC,KAAKP,IAAI4B,UAAW,SAACoC,EAAUvD,GAC3BwC,EAAiBe,IAAaA,IAAahE,IAAI2B,iBACjD3B,IAAIqE,IAAIC,QAAQN,EAAUf,EAAiBe,IAAa,GAGxDhE,IAAIqE,IAAIE,QAAQP,KAKtBjE,KAAKR,aAAaiF,MAAQzE,KAAKR,aAAaiF,IAAI9D,QAAUqC,EAhErC,IAAA0B,IAAA,EAAAC,GAAA,EAAAC,EAAApB,MAAA,KAiErB,IAAA,GAAAqB,GAAAC,EAAiB9F,OAAO+F,KAAK9E,IAAI+D,aAAjCL,OAAAC,cAAAc,GAAAG,EAAAC,EAAAjB,QAAAC,MAAAY,GAAA,EAA+C,CAAA,GAAtC3F,GAAsC8F,EAAA5F,KAC7Ce,MAAKR,aAAaT,KAAUiB,KAAKR,aAAaT,GAAM4B,QAAUsC,EAAalE,IAAS,IAlEjE,MAAAmF,GAAAS,GAAA,EAAAC,EAAAV,EAAA,QAAA,KAAAQ,GAAAI,EAAAX,QAAAW,EAAAX,SAAA,QAAA,GAAAQ,EAAA,KAAAC,IAqErBI,WAAW,WACTnC,EAAKE,IAAI,UAAWtD,IACnB","file":"gv-results.min.js","sourcesContent":["Polymer({\r\n  is: 'gv-results',\r\n  properties: {\r\n    tabFirst: {\r\n      type: Object,\r\n      value: {\r\n        type: 'all',\r\n        plural: 'Tous',\r\n        icon: 'list'\r\n      }\r\n    },\r\n    typeSelected: {\r\n      type: String\r\n    },\r\n    tabs: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    tabsRegistry: {\r\n      type: Object,\r\n      value: {}\r\n    },\r\n    results: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    searchPreviousTerm: {\r\n      type: String,\r\n      value: null\r\n    },\r\n    searchPreviousBuilding: {\r\n      type: String,\r\n      value: null\r\n    },\r\n    route: {\r\n      type: Object,\r\n      observer: '_routeChanged'\r\n    }\r\n  },\r\n\r\n  attached() {\r\n    \"use strict\";\r\n    gvc.results = this;\r\n    this.domSearchResults = gvc.domId('searchResults');\r\n    this.domLoadingSpinner = gvc.domId('searchLoadingSpinner');\r\n    // Wait global settings.\r\n    GVCarto.ready(() => {\r\n      let tabs = [\r\n        this.tabFirst\r\n      ];\r\n      $.each(gvc.entities, (type, data) => {\r\n        data.counter = 0;\r\n        tabs.push(data);\r\n      });\r\n      this.tabs = tabs;\r\n      // Activate first tab by default.\r\n      this.selectType('all');\r\n    });\r\n  },\r\n\r\n  tabRegister(type, component) {\r\n    \"use strict\";\r\n    this.tabsRegistry[type] = component;\r\n    // Refresh selected tab.\r\n    this.selectType(this.typeSelected);\r\n  },\r\n\r\n  selectType(tab)  {\r\n    \"use strict\";\r\n    // Deselect tab if current.\r\n    if (this.typeSelected && this.tabsRegistry[tab]) {\r\n      this.tabsRegistry[this.typeSelected].$$('li').classList.remove('active');\r\n    }\r\n    // Save.\r\n    this.typeSelected = tab;\r\n    // It may not be already created.\r\n    if (this.tabsRegistry[tab]) {\r\n      this.tabsRegistry[tab].$$('li').classList.add('active');\r\n    }\r\n    // Render results.\r\n    this.searchRender();\r\n  },\r\n\r\n  _routeChanged: function (data) {\r\n    //// We are on the search mode.\r\n    if (data.prefix === '/rechercher') {\r\n      // Route change may be fired before init.\r\n      window.GVCarto.ready(() => {\r\n        let split = data.path.split('/');\r\n        gvc.buildingSelected =\r\n          this.searchPreviousBuilding = (gvc.buildings[split[1]] ? split[1] : gvc.buildingSelectedAll);\r\n        // Term has not changed (maybe building changed).\r\n        if (this.searchPreviousTerm === split[2]) {\r\n          this.searchRender();\r\n        }\r\n        else {\r\n          this.searchPreviousTerm = split[2];\r\n          this.search(split[2], split[1]);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    \"use strict\";\r\n    // Cleanup term to avoid search errors.\r\n    term = (term || '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\r\n    this.searchError =\r\n      this.noResult = false;\r\n    // Empty page.\r\n    this.results = [];\r\n    // Show spinner.\r\n    this.domLoadingSpinner.style.display = 'block';\r\n    // Build callback function.\r\n    let complete = (data) => {\r\n      this.domLoadingSpinner.style.display = 'none';\r\n      this.searchRender(data.responseJSON);\r\n    };\r\n    // Say that this function is the\r\n    // only one we expect to be executed.\r\n    // It prevent to parse multiple responses.\r\n    this.searchQueryLastComplete = complete;\r\n    gvc.ajax('webservice/search?t=' + encodeURIComponent(term), (data) => {\r\n      \"use strict\";\r\n      // Check that we are on the last callback expected.\r\n      complete === this.searchQueryLastComplete\r\n        // Continue.\r\n      && complete(data);\r\n    });\r\n  },\r\n\r\n  searchRender(response) {\r\n    \"use strict\";\r\n    let results = [];\r\n    // Reset again if just rendering fired.\r\n    this.searchError =\r\n      this.noResult = false;\r\n    this.results.length = 0;\r\n    this.set('results', []);\r\n    let totalCounter = 0;\r\n    let typesCounter = {};\r\n    let buildingsCounter = {};\r\n\r\n    // Allow empty response.\r\n    response = response || this.renderSearchResultResponse || {};\r\n    // Save last data for potential reload.\r\n    this.renderSearchResultResponse = response;\r\n\r\n    if (response.error) {\r\n      this.searchError = true;\r\n    }\r\n    else if (response.results) {\r\n\r\n      for (let result of response.results) {\r\n        // Data is allowed.\r\n        if (gvc.searchTypes[result.type]) {\r\n\r\n          // Count results by building.\r\n          if (gvc.buildings[result.building]) {\r\n            buildingsCounter[result.building] = buildingsCounter[result.building] || 0;\r\n            buildingsCounter[result.building]++;\r\n          }\r\n          // This building is enabled.\r\n          if (gvc.buildingSelected === gvc.buildingSelectedAll || result.building === gvc.buildingSelected) {\r\n            // Count results.\r\n            typesCounter[result.type] = typesCounter[result.type] || 0;\r\n            typesCounter[result.type]++;\r\n            totalCounter++;\r\n            // This tab is enabled.\r\n            if (this.typeSelected === 'all' || result.type === this.typeSelected) {\r\n              results.push(result);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.noResultContext = ' ... ';\r\n      if (results.length === 0) {\r\n        this.noResult = true;\r\n        if (gvc.buildingSelected != gvc.buildingSelectedAll) {\r\n          this.noResultContext = ' dans le b√¢timent ' + gvc.buildings[gvc.buildingSelected].title + '.';\r\n        }\r\n      }\r\n\r\n      // Show pins.\r\n      $.each(gvc.buildings, (building, data) => {\r\n        if (buildingsCounter[building] || building === gvc.buildingSelected) {\r\n          gvc.map.pinShow(building, buildingsCounter[building] || 0);\r\n        }\r\n        else {\r\n          gvc.map.pinHide(building);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.tabsRegistry.all && (this.tabsRegistry.all.counter = totalCounter);\r\n    for (let type of Object.keys(gvc.searchTypes)) {\r\n      this.tabsRegistry[type] && (this.tabsRegistry[type].counter = typesCounter[type] || 0);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.set('results', results);\r\n    }, 100);\r\n  }\r\n});\r\n"]}