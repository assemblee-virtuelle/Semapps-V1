{"version":3,"sources":["web/front/src/gv-results/gv-results.js"],"names":["Polymer","is","properties","tabFirst","type","Object","value","plural","icon","typeSelected","String","tabs","Array","tabsRegistry","results","searchPreviousTerm","searchPreviousBuilding","route","observer","attached","_this","this","gvc","domSearchResults","domId","domLoadingSpinner","GVCarto","ready","$","each","entities","data","counter","push","selectType","tabRegister","component","tab","$$","classList","remove","add","searchRender","_routeChanged","_this2","prefix","window","split","path","buildingSelected","buildings","buildingSelectedAll","search","term","_this3","replace","searchError","style","display","complete","responseJSON","searchQueryLastComplete","ajax","url","encodeURIComponent","dataType","response","_this4","length","set","totalCounter","typesCounter","buildingsCounter","renderSearchResultResponse","error","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","searchTypes","building","err","return","map","pinShow","pinHide","all","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","setTimeout"],"mappings":"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","file":"gv-results.min.js","sourcesContent":["Polymer({\n  is: 'gv-results',\n  properties: {\n    tabFirst: {\n      type: Object,\n      value: {\n        type: 'all',\n        plural: 'Tous',\n        icon: 'list'\n      }\n    },\n    typeSelected: {\n      type: String\n    },\n    tabs: {\n      type: Array,\n      value: []\n    },\n    tabsRegistry: {\n      type: Object,\n      value: {}\n    },\n    results: {\n      type: Array,\n      value: []\n    },\n    searchPreviousTerm: {\n      type: String,\n      value: null\n    },\n    searchPreviousBuilding: {\n      type: String,\n      value: null\n    },\n    route: {\n      type: Object,\n      observer: '_routeChanged'\n    }\n  },\n\n  attached() {\n    \"use strict\";\n    gvc.results = this;\n    this.domSearchResults = gvc.domId('searchResults');\n    this.domLoadingSpinner = gvc.domId('searchLoadingSpinner');\n    // Wait global settings.\n    GVCarto.ready(() => {\n      let tabs = [\n        this.tabFirst\n      ];\n      $.each(gvc.entities, (type, data) => {\n        data.counter = 0;\n        tabs.push(data);\n      });\n      this.tabs = tabs;\n      // Activate first tab by default.\n      this.selectType('all');\n    });\n  },\n\n  tabRegister(type, component) {\n    \"use strict\";\n    this.tabsRegistry[type] = component;\n    // Refresh selected tab.\n    this.selectType(this.typeSelected);\n  },\n\n  selectType(tab)  {\n    \"use strict\";\n    // Deselect tab if current.\n    if (this.typeSelected && this.tabsRegistry[tab]) {\n      this.tabsRegistry[this.typeSelected].$$('li').classList.remove('active');\n    }\n    // Save.\n    this.typeSelected = tab;\n    // It may not be already created.\n    if (this.tabsRegistry[tab]) {\n      this.tabsRegistry[tab].$$('li').classList.add('active');\n    }\n    // Render results.\n    this.searchRender();\n  },\n\n  _routeChanged: function (data) {\n    //// We are on the search mode.\n    if (data.prefix === '/rechercher') {\n      // Route change may be fired before init.\n      window.GVCarto.ready(() => {\n        let split = data.path.split('/');\n        gvc.buildingSelected =\n          this.searchPreviousBuilding = (gvc.buildings[split[1]] ? split[1] : gvc.buildingSelectedAll);\n        // Term has not changed (maybe building changed).\n        if (this.searchPreviousTerm === split[2]) {\n          this.searchRender();\n        }\n        else {\n          this.searchPreviousTerm = split[2];\n          this.search(split[2], split[1]);\n        }\n      });\n    }\n  },\n\n  search(term) {\n    \"use strict\";\n    // Cleanup term to avoid search errors.\n    term = (term || '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\n    this.searchError = false;\n    // Empty page.\n    this.results = [];\n    // Show spinner.\n    this.domLoadingSpinner.style.display = 'block';\n    // Build callback function.\n    let complete = (data) => {\n      this.domLoadingSpinner.style.display = 'none';\n      this.searchRender(data.responseJSON);\n    };\n    // Say that this function is the\n    // only one we expect to be executed.\n    // It prevent to parse multiple responses.\n    this.searchQueryLastComplete = complete;\n    $.ajax({\n      url: '/webservice/search?t=' + encodeURIComponent(term),\n      dataType: 'json',\n      complete: (data) => {\n        \"use strict\";\n        // Check that we are on the last callback expected.\n        complete === this.searchQueryLastComplete\n          // Continue.\n        && complete(data);\n      }\n    });\n  },\n\n  searchRender(response) {\n    \"use strict\";\n    let results = [];\n    this.results.length = 0;\n    this.set('results', []);\n    let totalCounter = 0;\n    let typesCounter = {};\n    let buildingsCounter = {};\n\n    // Allow empty response.\n    response = response || this.renderSearchResultResponse || {};\n    // Save last data for potential reload.\n    this.renderSearchResultResponse = response;\n\n    if (response.error) {\n      this.searchError = true;\n    }\n    else if (response.results) {\n      this.searchError = false;\n\n      for (let result of response.results) {\n        // Data is allowed.\n        if (gvc.searchTypes[result.type]) {\n          // Count results event there are not displayed.\n          typesCounter[result.type] = typesCounter[result.type] || 0;\n          typesCounter[result.type]++;\n          totalCounter++;\n          // Count results by building.\n          if (gvc.buildings[result.building]) {\n            buildingsCounter[result.building] = buildingsCounter[result.building] || 0;\n            buildingsCounter[result.building]++;\n          }\n          if (\n            // This tab is enabled.\n          (this.typeSelected === 'all' || result.type === this.typeSelected) &&\n            // This building is enabled.\n          (gvc.buildingSelected === gvc.buildingSelectedAll || result.building === gvc.buildingSelected)\n          ) {\n            results.push(result);\n          }\n        }\n      }\n\n      $.each(gvc.buildings, (building, data) => {\n        if (buildingsCounter[building] || building === gvc.buildingSelected) {\n          gvc.map.pinShow(building, buildingsCounter[building] || 0);\n        }\n        else {\n          gvc.map.pinHide(building);\n        }\n      });\n    }\n\n    this.tabsRegistry.all && (this.tabsRegistry.all.counter = totalCounter);\n    for (let type of Object.keys(gvc.searchTypes)) {\n      this.tabsRegistry[type] && (this.tabsRegistry[type].counter = typesCounter[type] || 0);\n    }\n\n    setTimeout(() => {\n      this.set('results', results);\n    }, 100);\n  }\n});\n"]}