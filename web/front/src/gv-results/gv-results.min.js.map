{"version":3,"sources":["web/front/src/gv-results/gv-results.js"],"names":["Polymer","is","properties","tabFirst","type","Object","value","plural","icon","typeSelected","String","tabs","Array","tabsRegistry","results","searchLastTerm","route","observer","attached","_this","this","gvc","domSearchResults","domId","domLoadingSpinner","$searchThemeFilter","$","GVCarto","ready","typeSel","each","entities","data","counter","push","selectType","tabRegister","component","tab","$$","classList","remove","add","searchRender","_routeChanged","_this2","prefix","window","split","path","search","term","building","_this3","filterUri","val","buildingSelected","searchLastBuilding","buildings","buildingSelectedAll","searchLastFilter","replace","searchError","noResult","style","display","complete","responseJSON","searchQueryLastComplete","ajax","encodeURIComponent","response","_this4","length","set","totalCounter","typesCounter","buildingsCounter","renderSearchResultResponse","error","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","result","searchTypes","err","return","resultsTitle","title","map","pinHideAll","pinShow","all","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","setTimeout"],"mappings":"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","file":"gv-results.min.js","sourcesContent":["Polymer({\r\n  is: 'gv-results',\r\n  properties: {\r\n    tabFirst: {\r\n      type: Object,\r\n      value: {\r\n        type: 'all',\r\n        plural: 'Tous',\r\n        icon: 'list'\r\n      }\r\n    },\r\n    typeSelected: {\r\n      type: String\r\n    },\r\n    tabs: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    tabsRegistry: {\r\n      type: Object,\r\n      value: {}\r\n    },\r\n    results: {\r\n      type: Array,\r\n      value: []\r\n    },\r\n    searchLastTerm: {\r\n      type: String,\r\n      value: null\r\n    },\r\n    route: {\r\n      type: Object,\r\n      observer: '_routeChanged'\r\n    }\r\n  },\r\n\r\n  attached() {\r\n    \"use strict\";\r\n    gvc.results = this;\r\n    this.domSearchResults = gvc.domId('searchResults');\r\n    this.domLoadingSpinner = gvc.domId('searchLoadingSpinner');\r\n    this.$searchThemeFilter = $('#searchThemeFilter');\r\n    // Wait global settings.\r\n    GVCarto.ready(() => {\r\n      let tabs = [];\r\n      let typeSel = '';\r\n      $.each(gvc.entities, (type, data) => {\r\n        data.counter = 0;\r\n        typeSel = (typeSel == '') ? type : typeSel;\r\n        tabs.push(data);\r\n      });\r\n      this.tabs = tabs;\r\n      // Activate first tab by default.\r\n      this.selectType(typeSel);\r\n    });\r\n  },\r\n\r\n  tabRegister(type, component) {\r\n    \"use strict\";\r\n    this.tabsRegistry[type] = component;\r\n    // Refresh selected tab.\r\n    this.selectType(this.typeSelected);\r\n  },\r\n\r\n  selectType(tab)  {\r\n    \"use strict\";\r\n    // Deselect tab if current.\r\n    if (this.typeSelected && this.tabsRegistry[tab]) {\r\n      this.tabsRegistry[this.typeSelected].$$('li').classList.remove('active');\r\n    }\r\n    // Save.\r\n    this.typeSelected = tab;\r\n    // It may not be already created.\r\n    if (this.tabsRegistry[tab]) {\r\n      this.tabsRegistry[tab].$$('li').classList.add('active');\r\n    }\r\n    // Render results.\r\n    this.searchRender();\r\n  },\r\n\r\n  _routeChanged: function (data) {\r\n    // We are on the search mode.\r\n    if (data.prefix === '/rechercher') {\r\n      // Route change may be fired before init.\r\n      window.GVCarto.ready(() => {\r\n        let split = data.path.split('/');\r\n        this.search(split[2], split[1]);\r\n      });\r\n    }\r\n  },\r\n\r\n  search(term, building) {\r\n    \"use strict\";\r\n    let filterUri = this.$searchThemeFilter.val();\r\n    gvc.buildingSelected =\r\n      gvc.searchLastBuilding = (gvc.buildings[building] ? building : gvc.buildingSelectedAll);\r\n    // Term and has not changed.\r\n    if (gvc.searchLastTerm === term &&\r\n        // Filter has not changed.\r\n      gvc.searchLastFilter === filterUri) {\r\n      // (maybe building changed).\r\n      this.searchRender();\r\n      return;\r\n    }\r\n    // Cleanup term to avoid search errors.\r\n    gvc.searchLastTerm =\r\n      term = (term || '').replace(/[`~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, '');\r\n    // Save filter.\r\n    gvc.searchLastFilter = filterUri;\r\n    this.searchError =\r\n      this.noResult = false;\r\n    // Empty page.\r\n    this.results = [];\r\n    // Show spinner.\r\n    this.domLoadingSpinner.style.display = 'block';\r\n    // Build callback function.\r\n    let complete = (data) => {\r\n      this.domLoadingSpinner.style.display = 'none';\r\n      this.searchRender(data.responseJSON);\r\n    };\r\n    // Say that this function is the\r\n    // only one we expect to be executed.\r\n    // It prevent to parse multiple responses.\r\n    this.searchQueryLastComplete = complete;\r\n    gvc.ajax('webservice/search?' +\r\n      't=' + encodeURIComponent(term) +\r\n      '&f=' + encodeURIComponent(gvc.searchLastFilter), (data) => {\r\n      \"use strict\";\r\n      // Check that we are on the last callback expected.\r\n      complete === this.searchQueryLastComplete\r\n        // Continue.\r\n      && complete(data);\r\n    });\r\n  },\r\n\r\n  searchRender(response) {\r\n    \"use strict\";\r\n    let results = [];\r\n    // Reset again if just rendering fired.\r\n    this.searchError =\r\n      this.noResult = false;\r\n    this.results.length = 0;\r\n    this.set('results', []);\r\n    let totalCounter = 0;\r\n    let typesCounter = {};\r\n    let buildingsCounter = {};\r\n\r\n    // Allow empty response.\r\n    response = response || this.renderSearchResultResponse || {};\r\n    // Save last data for potential reload.\r\n    this.renderSearchResultResponse = response;\r\n\r\n    if (response.error) {\r\n      this.searchError = true;\r\n    }\r\n    else if (response.results) {\r\n\r\n      for (let result of response.results) {\r\n        // Data is allowed.\r\n        if (gvc.searchTypes[result.type]) {\r\n\r\n          // Count results by building.\r\n          if (gvc.buildings[result.building]) {\r\n            buildingsCounter[result.building] = buildingsCounter[result.building] || 0;\r\n            buildingsCounter[result.building]++;\r\n          }\r\n          // This building is enabled.\r\n          if (gvc.buildingSelected === gvc.buildingSelectedAll || result.building === gvc.buildingSelected) {\r\n            // Count results.\r\n            typesCounter[result.type] = typesCounter[result.type] || 0;\r\n            typesCounter[result.type]++;\r\n            totalCounter++;\r\n            // This tab is enabled.\r\n            if (this.typeSelected === 'all' || result.type === this.typeSelected) {\r\n              results.push(result);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Create title.\r\n      let resultsTitle = '';\r\n      // Results number.\r\n      resultsTitle += (results.length) ? results.length + ' résultats dans ' : 'Aucun résultat dans ';\r\n      // Building.\r\n      resultsTitle += (gvc.buildingSelected === gvc.buildingSelectedAll) ? 'tous les bâtiments' : 'le bâtiment ' + gvc.buildings[gvc.buildingSelected].title;\r\n      // Display title.\r\n      this.resultsTitle = resultsTitle;\r\n\r\n      // Display no results section or not.\r\n      this.noResult = results.length === 0;\r\n\r\n      // Show pins with results only.\r\n      gvc.map.pinHideAll();\r\n      $.each(gvc.buildings, (building) => {\r\n        if (buildingsCounter[building] || building === gvc.buildingSelected) {\r\n          gvc.map.pinShow(building, buildingsCounter[building] || 0);\r\n        }\r\n      });\r\n    }\r\n\r\n    this.tabsRegistry.all && (this.tabsRegistry.all.counter = totalCounter);\r\n    for (let type of Object.keys(gvc.searchTypes)) {\r\n      this.tabsRegistry[type] && (this.tabsRegistry[type].counter = typesCounter[type] || 0);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.set('results', results);\r\n    }, 100);\r\n  }\r\n});\r\n"]}