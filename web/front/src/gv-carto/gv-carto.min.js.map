{"version":3,"sources":["web/front/src/gv-carto/gv-carto.js"],"names":["window","log","m","console","Polymer","is","ready","gvc","this","$window","$","buildingSelected","location","hostname","document","body","classList","add","ajaxMultiple","buildings","origin","start","sources","callback","ajaxCounter","allData","self","key","ajax","url","complete","e","JSON","parse","responseText","call","data","_this","domSearchTextInput","domId","domSearchResults","stateSet","callbackSearchEvent","searchEvent","bind","listen","blur","scrollToSearch","timeout","clearTimeout","setTimeout","stateName","stateCurrent","nameCapitalized","charAt","toUpperCase","slice","nameCurrentCapitalized","stateWaitingInit","stateWaitingExit","stateSearchInit","value","stateSearchExit","scrollTo","offset","top","duration","easing","preventDefault","term","search","building","_this2","arguments","length","undefined","innerHTML","hide","$loadingSpinner","renderSearchResult","responseJSON","searchQueryLastComplete","show","encodeURIComponent","dataType","response","error","results","i","result","createElement","label","uri","appendChild","id","event","Array","isArray","addEventListener","getElementById","dom","selector","querySelectorAll"],"mappings":"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","file":"gv-carto.min.js","sourcesContent":["// Devel\nwindow.log = (m) => {\n  console.log(m);\n};\n\nPolymer({\n  is: 'gv-carto',\n  ready() {\n    \"use strict\";\n\n    window.gvc = this;\n\n    this.$window = $(window);\n    this.buildingSelected = 'all';\n\n    // Special class for dev env.\n    if (window.location.hostname === '127.0.0.1') {\n      window.document.body.classList.add('dev-env');\n    }\n\n    this.ajaxMultiple({\n      buildings: window.location.origin + '/webservice/building'\n    }, this.start);\n  },\n\n  ajaxMultiple(sources, callback) {\n    \"use strict\";\n    var ajaxCounter = 0;\n    var allData = {};\n    var self = this;\n    for (var key in sources) {\n      ajaxCounter++;\n      $.ajax({\n        url: sources[key],\n        complete: function (key) {\n          return function (e) {\n            ajaxCounter--;\n            allData[key] = JSON.parse(e.responseText);\n            // Final callback.\n            if (ajaxCounter === 0) {\n              callback.call(self, allData);\n            }\n          }\n        }(key)\n      });\n    }\n  },\n\n  start(data) {\n    \"use strict\";\n    this.buildings = data.buildings;\n    // Shortcuts.\n    this.domSearchTextInput = this.domId('searchText');\n    this.domSearchResults = this.domId('searchResults');\n    this.stateSet('waiting');\n\n    // Listeners.\n    var callbackSearchEvent = this.searchEvent.bind(this);\n    // Click on submit button.\n    this.listen('searchForm', 'submit', (e) => {\n      this.domSearchTextInput.blur();\n      this.scrollToSearch();\n      callbackSearchEvent(e);\n    });\n    var timeout;\n    // Type in search field.\n    this.listen('searchText', 'keyup', () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n      // Avoid to make too much requests when typing.\n      timeout = window.setTimeout(callbackSearchEvent, 500);\n    });\n  },\n\n  stateSet(stateName) {\n    if (this.stateCurrent !== stateName) {\n      let nameCapitalized = stateName.charAt(0).toUpperCase() + stateName.slice(1);\n      if (this.stateCurrent) {\n        let nameCurrentCapitalized = this.stateCurrent.charAt(0).toUpperCase() + this.stateCurrent.slice(1);\n        this['state' + nameCurrentCapitalized + 'Exit']();\n        this.stateCurrent = null;\n      }\n      // Callback should not return false if success.\n      if (this['state' + nameCapitalized + 'Init']() !== false) {\n        this.stateCurrent = stateName;\n      }\n    }\n  },\n\n  /* -- Waiting --*/\n  stateWaitingInit() {\n\n  },\n\n  stateWaitingExit() {\n\n  },\n\n  /* -- Search -- */\n\n  stateSearchInit() {\n    if (!this.domSearchTextInput.value) {\n      this.stateSet('waiting');\n      // Block saving current state.\n      return false;\n    }\n  },\n\n  stateSearchExit() {\n\n  },\n  scrollToSearch() {\n    this.$window.scrollTo($('#searchTabs').offset().top - 150, {\n      duration: 1000,\n      easing: 'easeOutQuad'\n    });\n  },\n\n  searchEvent(e) {\n    // Event may be missing.\n    e && e.preventDefault();\n    var term = this.domSearchTextInput.value;\n    this.search(term, {\n      building: this.buildingSelected\n    });\n  },\n\n  search(term, options = {}) {\n    this.stateSet('search');\n\n    // Empty content.\n    this.domSearchResults.innerHTML = '';\n    // Hide all results.\n    $('#gv-results-empty, #gv-results-error').hide();\n\n    if (!term) {\n      return;\n    }\n\n    var $loadingSpinner = $('#gv-spinner');\n    // Build callback function.\n    var complete = (data) => {\n      $loadingSpinner.hide();\n      this.renderSearchResult(data.responseJSON);\n    };\n    // Say that this function is the\n    // only one we expect to be executed.\n    // It prevent to execute multiple responses.\n    this.searchQueryLastComplete = complete;\n\n    $loadingSpinner.show();\n\n    $.ajax({\n      url: 'webservice/search?t=' + encodeURIComponent(term),\n      dataType: 'json',\n      complete: (data) => {\n        \"use strict\";\n        // Check that we are on the last callback expected.\n        complete === this.searchQueryLastComplete\n          // Continue.\n        && complete(data);\n      }\n    });\n  },\n\n  renderSearchResult(response) {\n    \"use strict\";\n    if (response.error) {\n      $('#gv-results-error').show();\n    }\n    else if (!response.results.length) {\n      $('#gv-results-empty').show();\n    }\n    else {\n      for (let i in response.results) {\n        let data = response.results[i];\n        let result = document.createElement('gv-results-item');\n        result.label = data.label;\n        result.uri = data.uri;\n        this.domSearchResults.appendChild(result);\n      }\n    }\n  },\n\n  listen(id, event, callback) {\n    // Support list of events names.\n    if (Array.isArray(event)) {\n      for (let i in event) {\n        this.listen(id, event[i], callback);\n      }\n      return;\n    }\n    return this.domId(id).addEventListener(event, callback);\n  },\n\n  domId(id) {\n    return document.getElementById(id);\n  },\n\n  dom(selector) {\n    return document.querySelectorAll(selector);\n  }\n\n});\n"]}